#!/bin/sh

# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

Makefile() {
  if [ $strip -ne 0 ] ; then
    stripopt="-s"
  fi

  if [ -z "$cc" ] ; then
    cc=$CC
  fi
cat << EOF > Makefile
# This Makefile automatically generated by configure.

CC =		$cc
CFLAGS =	$cflags
EOF

if [ ! -z "$ldflags" ] ; then
cat << EOF >> Makefile
LDFLAGS =	$ldflags
EOF
fi

if [ ! -z "$vpath" ] ; then
cat << EOF >> Makefile

VPATH =		$vpath
EOF
fi

cat << EOF >> Makefile

PREFIX =	$prefix
BINDIR =	$bindir
MANDIR =	$mandir

PROG =	$instprog
OBJS =	main.o zopen.o gzopen.o nullopen.o \\
	reallocarray.o strlcat.o strlcpy.o $miniz

all: \${PROG}

\${PROG}: \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS} $libs

install:
	install -d \${DESTDIR}\${BINDIR}
	install -d \${DESTDIR}\${MANDIR}/man1
	install -c $stripopt -m 755 \${PROG} \${DESTDIR}\${BINDIR}
	ln -s \${BINDIR}\${PROG} \${DESTDIR}\${BINDIR}/gunzip
	ln -s \${BINDIR}\${PROG} \${DESTDIR}\${BINDIR}/gzcat
	install -c -m 755 zdiff \${DESTDIR}\${BINDIR}
	ln -s \${BINDIR}/zdiff \${DESTDIR}\${BINDIR}/zcmp
	install -c -m 755 zmore \${DESTDIR}\${BINDIR}
	ln -s \${BINDIR}/zmore \${DESTDIR}\${BINDIR}/zless
	install -c -m 755 zforce \${DESTDIR}\${BINDIR}
	install -c -m 755 gzexe \${DESTDIR}\${BINDIR}
EOF

if [ $compress -eq 1 ] ; then
  cat << EOF >> Makefile
	ln -s \${BINDIR}\${PROG} \${DESTDIR}\${BINDIR}/compress
	ln -s \${BINDIR}\${PROG} \${DESTDIR}\${BINDIR}/uncompress
	ln -s \${BINDIR}\${PROG} \${DESTDIR}\${BINDIR}/zcat
	install -c -m 755 znew \${DESTDIR}\${BINDIR}
	install -c -m 644 compress.1 \${DESTDIR}\${MANDIR}/man1
	install -c -m 644 znew.1 \${DESTDIR}\${MANDIR}/man1
EOF
fi

cat << EOF >> Makefile
	install -c -m 644 \${PROG}.1 \${DESTDIR}\${MANDIR}/man1
	install -c -m 644 gzexe.1 \${DESTDIR}\${MANDIR}/man1
	install -c -m 644 zdiff.1 \${DESTDIR}\${MANDIR}/man1
	install -c -m 644 zforce.1 \${DESTDIR}\${MANDIR}/man1
	install -c -m 644 zmore.1 \${DESTDIR}\${MANDIR}/man1

test:
	echo "No tests"

clean:
	rm -f \${PROG} \${OBJS}

distclean: clean
	rm -f Makefile config.h *.core
EOF
}

cccheck() {
  if [ ! -z "$CC" ] ; then
cat << EOF > conftest.c
int main(void){return 0;}
EOF
    $CC $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
    $CC $ldflags -o conftest conftest.o > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.o conftest.c
	cc="$CC"
	return 0
      else
	echo "could not build working executables"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.o conftest.c
    fi
  fi

  for compiler in cc clang pcc tcc lacc cparser ccomp xlc gcc ; do
cat << EOF > conftest.c
int main(void){return 0;}
EOF

    $compiler $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
    $compiler $ldflags -o conftest conftest.o > /dev/null 2>&1

    if [ $? -eq 0 ] ; then
      ./conftest
      if [ $? -eq 0 ] ; then
	rm -f conftest conftest.o conftest.c
	cc="$compiler"
	return 0
      else
	echo "could not build working executables"
	echo "Please ensure your C compiler is a native compiler"
	exit 1
      fi
    else
      rm -f conftest conftest.o conftest.c
    fi
  done
  return 1
}

deadcheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
__dead usage(void){exit(1);}int main(void){usage();return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

dead2check() {
  cat << EOF > conftest.c
#include <stdlib.h>
__dead2 usage(void){exit(1);}int main(void){usage();return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

defaultcflagscheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -g -O2 -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

fchflagscheck() {
  cat << EOF > conftest.c
#include <sys/stat.h>
int main(void){fchflags(0,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

ltoflagcheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -flto -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -flto -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

noreturncheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
__attribute__((__noreturn__)) usage(void){exit(1);}int main(void){usage();return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

pledgecheck() {
  cat << EOF > conftest.c
#include <unistd.h>
int main(void){pledge(NULL,NULL);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

# Intentionally fail on Android.
# Avoids header/library mismatches as found on
#   (at least) Termux. Doesn't hurt to use the
#   portable reallocarray in this repo.
reallocarraycheck() {
  cat << EOF > conftest.c
#include <stdlib.h>
#ifdef __ANDROID__
00ThisWillDefinitelyFail00
#endif
int main(void){reallocarray(NULL, 0, 0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

st_atimespeccheck() {
  cat << EOF > conftest.c
#include <sys/stat.h>
int main(void){struct stat s;s.st_atimespec.tv_sec=0;return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

st_mtimespeccheck() {
  cat << EOF > conftest.c
#include <sys/stat.h>
int main(void){struct stat s;s.st_mtimespec.tv_sec=0;return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

strlcatcheck() {
  cat << EOF > conftest.c
#include <string.h>
int main(void){strlcat(NULL,NULL,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

strlcpycheck() {
  cat << EOF > conftest.c
#include <string.h>
int main(void){strlcpy(NULL,NULL,0);return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

uint32tcheck() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){u_int32_t a;return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

uint64tcheck() {
  cat << EOF > conftest.c
#include <stdio.h>
int main(void){u_int64_t a;return 0;}
EOF
  $cc $cflags -o conftest.o -c conftest.c > /dev/null 2>&1
  $cc $ldflags -o conftest conftest.o > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 0
  else
    rm -f conftest conftest.o conftest.c
    return 1
  fi
}

wflagcheck() {
  cat << EOF > conftest.c
int main(void){return 0;}
EOF
  $cc $cflags -w -o conftest.o -c conftest.c > /dev/null 2>&1
  if [ $? -eq 0 ] ; then
    rm -f conftest conftest.o conftest.c
    return 1
  else
    rm -f conftest conftest.o conftest.c
    return 0
  fi
}

# Option variables
if [ ! -z "$PREFIX" ] ; then
  prefix="$PREFIX"
else
  prefix="/usr/local"
fi

doconfigure=1
compileonly=0
bindirset=0
mandirset=0
bindir="$prefix/bin"
mandir="$prefix/share/man"

instprog="gzip"
libs="-lz"
compress=1
miniz=""
nonull=0
static=0
lto=0
small=0
strip=1

# Options
for opt
do
  case "$opt" in
    --prefix=*)
	prefix=${opt#*=}
	if [ $bindirset -eq 0 ] ; then
	  bindir="$prefix/bin"
	fi
	if [ $mandirset -eq 0 ] ; then
	  mandir="$prefix/share/man"
	fi
	;;
    --bindir=*)
	bindir=${opt#*=}
	bindirset=1
	;;
    --mandir=*)
	mandir=${opt#*=}
	mandirset=1
	;;
    --disable-compress|--enable-compress)
	if [ "x$opt" = "x--enable-compress" ] ; then
	  compress=1
	else
	  compress=0
	fi
	;;
    --disable-miniz|--enable-miniz)
	if [ "x$opt" = "x--enable-miniz" ] ; then
	  libs=""
	  miniz="miniz.o"
	else
	  libs="-lz"
	  miniz=""
	fi
	;;
    --disable-null|--enable-null)
	if [ "x$opt" = "x--enable-null" ] ; then
	  nonull=0
	else
	  nonull=1
	fi
	;;
    --disable-small|--enable-small)
	if [ "x$opt" = "x--enable-small" ] ; then
	  small=1
	else
	  small=0
	fi
	;;
    --disable-static|--enable-static)
	if [ "x$opt" = "x--enable-static" ] ; then
	  static=1
	else
	  static=0
	fi
	;;
    --disable-lto|--enable-lto)
	if [ "x$opt" = "x--enable-lto" ] ; then
	  lto=1
	else
	  lto=0
	fi
	;;
    --no-thanks)
	doconfigure=0
	;;
    --no-link)
	compileonly=1
	;;
    --no-strip)
	strip=0
	;;
    --help|-h)
	echo "Usage: configure [options]"
	echo ""
	echo "Options:"
	printf "  --help or -h            "
	echo "Display this help message"
	printf "  --prefix=PREFIX         "
	echo "Top level install directory is PREFIX [$prefix]"
	printf "  --bindir=BINDIR         "
	echo "Install executable to BINDIR [$bindir]"
	printf "  --mandir=MANDIR         "
	echo "Install manual pages to MANDIR [$mandir]"
	printf "  --enable-compress       "
	echo "Enable .Z (de)compression [default=yes]"
	printf "  --enable-miniz          "
	echo "Enable built-in zlib routines [default=no]"
	printf "  --enable-null           "
	echo "Enable null stream (de)compression [default=yes]"
	printf "  --enable-lto            "
	echo "Enable link-time optimization [default=no]"
	printf "  --enable-small          "
	echo "Enable read-only gzip utility [default=no]"
	printf "  --enable-static         "
	echo "Statically link executables [default=no]"
	printf "  --no-thanks             "
	echo "Skip all configure checks"
	printf "  --no-link               "
	echo "Compile only, do not link (requires --no-thanks)"
	printf "  --no-strip              "
	echo "Do not strip executables at install [default=strip]"
	exit 1
	;;
    *)
	;;
  esac
done

if [ ! -z "$CFLAGS" ] ; then
  cflags="$CFLAGS"
else
  cflags=""
fi

if [ ! -z "$LDFLAGS" ] ; then
  ldflags="$LDFLAGS "
else
  ldflags=""
fi

if [ $static -ne 0 ] ; then
  ldflags="${ldflags}-static"
fi

if [ $compileonly -eq 1 ] ; then
  if [ $doconfigure -eq 1 ] ; then
    echo "ERROR: --no-link requires --no-thanks"
    exit 1
  fi
fi

if [ $doconfigure -eq 0 ] ; then
  if [ -z "$CC" ] ; then
    CC=gcc
  fi
  echo "OK, I trust you."
  echo "I'll assume you have a C compiler and little else."
  echo "Edit Makefile and config.h if needed."
  echo "Good luck!"
  cat << EOF > config.h
/* This file automatically generated by configure.  */

#ifndef __dead
#define __dead
#endif

#ifndef st_atimespec
#define st_atim
#endif

#ifndef st_mtimespec
#define st_mtim
#endif

#define USE_MINIZ

/* #define HAVE_FCHFLAGS */
/* #define HAVE_PLEDGE */
/* #define HAVE_REALLOCARRAY */
/* #define HAVE_STRLCAT */
/* #define HAVE_STRLCPY */
EOF
  Makefile

  exit 0
fi

printf "checking for C compiler... "
cccheck
if [ $? -ne 0 ] ; then
  echo "not found"
  echo "Please install a C compiler and re-run configure."
  exit 1
else
  echo "$cc"
fi

if [ "x$cc" = "xvc" ] ; then
  echo "using vbcc, setting CFLAGS to -g -O=990"
  cflags="-g -O=990"
fi

if [ "x$cflags" = "x" ] ; then
  printf "checking if the compiler accepts -g -O2... "
  defaultcflagscheck
  if [ $? -eq 0 ] ; then
    echo "no"
  else
    cflags="-g -O2 $cflags"
    echo "yes"
  fi
fi

printf "checking for -w compiler flag... "
wflagcheck
if [ $? -eq 0 ] ; then
  echo "no"
else
  cflags="$cflags -w"
  echo "yes"
fi

printf "checking for OS... "
os=`uname -s`
echo "$os"

case "x$os" in
  "xLinux"|"xCYGWIN"*)
    cflags="$cflags -D_GNU_SOURCE"
    ;;
  "xNetBSD")
    cflags="$cflags -D_OPENBSD_SOURCE"
    ;;
  "xOpenBSD")
    case "x$cc" in
      "xccomp")
	cflags="$cflags -D_ANSI_LIBRARY"
	ldflags="$ldflags -Wl,-nopie"
	;;
      "xnwcc")
	ldflags="$ldflags -Wl,-nopie"
	;;
      "xvc")
	cflags="$cflags -D_ANSI_LIBRARY"
	;;
    esac
    ;;
  "xAIX"|"xOS400")
    cflags="$cflags -D_ALL_SOURCE"
    ldflags="-lbsd"
    ;;
esac

printf "checking for -flto compiler flag... "
if [ $lto -eq 0 ] ; then
  echo "not enabled"
else
  ltoflagcheck
  if [ $lto -eq 0 ] ; then
    echo "no"
  else
    cflags="$cflags -flto"
    ldflags="$ldflags -flto -Wl,-O3"
    echo "yes"
  fi
fi

if [ $compress -eq 0 ] ; then
  cflags="$cflags -DNOCOMPRESS"
fi

if [ "x$miniz" = "xminiz.o" ] ; then
  cflags="$cflags -DUSE_MINIZ"
fi

if [ $nonull -ne 0 ] ; then
  cflags="$cflags -DNONULL"
fi

if [ $small -ne 0 ] ; then
  cflags="$cflags -DSMALL"
fi

cat << EOF > config.h
/* This file automatically generated by configure.  */

EOF

printf "checking for __dead... "
deadcheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  echo "no"
  printf "checking for __dead2... "
  dead2check
  if [ $? -eq 0 ] ; then
    echo "#define __dead __dead2" >> config.h
    echo "yes"
  else
    echo "no"
    printf "checking for __attribute__((__noreturn__))... "
    noreturncheck
    if [ $? -eq 0 ] ; then
      echo "#define __dead __attribute__((__noreturn__))" >> config.h
      echo "yes"
    else
      echo "#define __dead" >> config.h
      echo "#define __attribute__(x)" >> config.h
      echo "no"
    fi
  fi
fi

printf "checking for fchflags... "
fchflagscheck
if [ $? -eq 0 ] ; then
  echo "#define HAVE_FCHFLAGS" >> config.h
  echo "yes"
else
  echo "no"
fi

printf "checking for pledge... "
pledgecheck
if [ $? -eq 0 ] ; then
  echo "#define HAVE_PLEDGE" >> config.h
  echo "yes"
else
  echo "no"
fi

printf "checking for reallocarray... "
reallocarraycheck
if [ $? -eq 0 ] ; then
  echo "#define HAVE_REALLOCARRAY" >> config.h
  echo "yes"
else
  echo "extern void *reallocarray(void *, size_t, size_t);" >> config.h
  echo "no"
fi

printf "checking for st_atimespec... "
st_atimespeccheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  echo "#define st_atimespec st_atim" >> config.h
  echo "no"
fi

printf "checking for st_mtimespec... "
st_mtimespeccheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  echo "#define st_mtimespec st_mtim" >> config.h
  echo "no"
fi

printf "checking for strlcat... "
strlcatcheck
if [ $? -eq 0 ] ; then
  echo "#define HAVE_STRLCAT" >> config.h
  echo "yes"
else
  echo "extern size_t strlcat(char *, const char *, size_t);" >> config.h
  echo "no"
fi

printf "checking for strlcpy... "
strlcpycheck
if [ $? -eq 0 ] ; then
  echo "#define HAVE_STRLCPY" >> config.h
  echo "yes"
else
  echo "extern size_t strlcpy(char *, const char *, size_t);" >> config.h
  echo "no"
fi

printf "checking for u_int32_t... "
uint32tcheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  cflags="$cflags -Du_int32_t=\"unsigned int\""
  echo "no"
fi

printf "checking for u_int64_t... "
uint64tcheck
if [ $? -eq 0 ] ; then
  echo "yes"
else
  cflags="$cflags -Du_int64_t=\"unsigned long long\""
  echo "no"
fi

printf "checking for out-of-tree build... "
if [ "x$(dirname $0)" = "x." ] ; then
  echo "no"
elif [ "x$(dirname $0)" = "x$(pwd)" ] ; then
  echo "no"
else
  echo "yes"
  vpath="$(dirname $0)"
  cflags="$cflags -I$(pwd)"
fi

cat << EOF >> config.h

#ifndef	DEFFILEMODE
#define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)
#endif

#ifndef ACCESSPERMS
#define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 00777 */
#endif

#ifndef EFTYPE
#define EFTYPE ENOTSUP
#endif
EOF

printf "creating Makefile... "
Makefile
echo "done"
